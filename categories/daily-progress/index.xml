<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Daily Progress on kyte codes</title><link>https://kyteinsky.github.io/categories/daily-progress/</link><description>Recent content in Daily Progress on kyte codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 29 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kyteinsky.github.io/categories/daily-progress/index.xml" rel="self" type="application/rss+xml"/><item><title>AWS Console and CLI Exploration</title><link>https://kyteinsky.github.io/p/aws-console-and-cli-exploration/</link><pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate><guid>https://kyteinsky.github.io/p/aws-console-and-cli-exploration/</guid><description>Inside the AWS Console: Explored compute machine options
EC2 is the easiest of all, provides vanilla virtual machine experience for fully self-managing the infrastructure Lambda is for small fuctions or API calls App Runner provides a full-managed infrastructure to run our app handling all the scaling, load balancing, installation of software and deployment. Elastic Beanstalk is a similar service to App Runner, but there is a slight difference, Elastic Beanstalk provides more control over infrastructure after deployment, whereas App Runner manages it fully even after deployment.</description></item><item><title>Installing Terraform and Creating an EC2 Instance</title><link>https://kyteinsky.github.io/p/installing-terraform-and-creating-an-ec2-instance/</link><pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate><guid>https://kyteinsky.github.io/p/installing-terraform-and-creating-an-ec2-instance/</guid><description>Ensure the prerequisites An AWS Account AWS cli installed, instructions for the same can be found here. Have generated credentials (access key and secret), can be created from here. Setting up AWS CLI Type aws configure on the terminal and enter the Access Key ID and Secret Access Key, other fields can be blank.
Creating a config file for terraform to understand Create a directory and switch to it Create a file named main.</description></item><item><title>Hosting Docker in Cloud (Azure)</title><link>https://kyteinsky.github.io/p/hosting-docker-in-cloud-azure/</link><pubDate>Tue, 15 Jun 2021 00:00:00 +0000</pubDate><guid>https://kyteinsky.github.io/p/hosting-docker-in-cloud-azure/</guid><description>Azure part of story First create one Azure account, I am using a student account Create a basic instance (Ubuntu image works for most cases) with 1 vCPU and 1 GiB RAM, or according to your needs Download the private key and SSH into the instance Update the packages Install docker (following this guide) Let&amp;rsquo;s move on to the local machine setup
Â Local machine setup SSH Keys Setup We need to install docker here as well Add ssh key (downloaded from Azure portal) to OpenSSH Auth agent eval &amp;#39;ssh-agent&amp;#39; ssh-add &amp;lt;path-to-pem-file&amp;gt;/&amp;lt;file-name&amp;gt;.</description></item><item><title>Git Add, Git Commit and Git Push</title><link>https://kyteinsky.github.io/p/git-add-git-commit-and-git-push/</link><pubDate>Fri, 11 Jun 2021 00:00:00 +0000</pubDate><guid>https://kyteinsky.github.io/p/git-add-git-commit-and-git-push/</guid><description>How to add and commit changes in the and then push the changes to a remote repository (here GitHub) Outline of steps to be performed: Change some files or create some Issuegit add &amp;lt;name of files&amp;gt;command to add files to be committed Then commit them using git commit -am &amp;lt;commit message&amp;gt;, here a is for all files, m is for message, and then you place your message for the changes (optional) Finally, push the changes to a remote repository Let&amp;rsquo;s see this in action</description></item><item><title>Embedding Asciinema in Hugo Websites</title><link>https://kyteinsky.github.io/p/embedding-asciinema-in-hugo-websites/</link><pubDate>Thu, 10 Jun 2021 00:00:00 +0000</pubDate><guid>https://kyteinsky.github.io/p/embedding-asciinema-in-hugo-websites/</guid><description>Following a general approach for any theme, steps to be performed (following this article): Specific for the theme Stack: Click Here
Get code for asciinema player wget https://github.com/asciinema/asciinema-player/releases/download/v2.6.1/asciinema-player.css wget https://github.com/asciinema/asciinema-player/releases/download/v2.6.1/asciinema-player.js Place them in static/css and static/js, where static is folder in the root dir of the website Copy the layouts/partials/_shared/head.html or layouts/partials/head/head.html from themes/&amp;lt;theme-name&amp;gt; directory to your website&amp;rsquo;s root directory with the same folder structure Do the same with layouts/_default/baseof.</description></item><item><title>New Hugo Website</title><link>https://kyteinsky.github.io/p/new-hugo-website/</link><pubDate>Tue, 01 Jun 2021 00:00:00 +0000</pubDate><guid>https://kyteinsky.github.io/p/new-hugo-website/</guid><description>We create a new Hugo website in terminal and install a custom theme named Stack and create a sample page Outline of steps to be performed: Create an empty hugo site with boilerplate code Initialize the site as a git repository Add the theme as a submodule to receive updates automatically, can be just cloned in place or downloaded and extracted at the right place manually Copy some example site&amp;rsquo;s posts and config file to the root folder of the website to edit them without disturbing the original theme files (these files override the respective default ones) Edit the config.</description></item></channel></rss>