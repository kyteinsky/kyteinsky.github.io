[{"content":"I will be working as a Google Summer of Code Intern at GNOME Foundation, and my project will be to add Chromecast support to the already very cool GNOME Network Displays app that has Miracast support as of now. It can be installed through flatpak as well.\nDetails Linux desktop users will be able to cast their screens to Miracast and Chromecast devices. For the Android TVs that feature both of them, it would be wise to opt for the Chromecast path when both the devices share the same router (i.e. are on the same network) since Miracast would require setting up a WiFi-Direct connection to function (may be faster with less latency, may not be worth the trouble).\nI believe this will see the light of day with very helpful and experienced mentors, Claudio Wunder and Benjamin Berg.\nProgress We started by looking into the Chromecast documentation (an adventure in itself). So there are two ends to deal with - the sender one and the receiver one.\nThe receiver end There are two options here: Styled Media Receiver and Custom Web Receiver.\nThe Styled Media Receiver does everything for us. It hosts the receiver application (an HTML5 app) and provides all the default styles and functionality. If we want to change the styles and/or the logo, we are free to host them on an HTTPS server, and we\u0026rsquo;ll be done.\nWith everything it offers, it has limited still quite adequate media support, including playing video files, audio files, streaming video, and audio, displaying images and opening specific apps on the TV (like YouTube).\nOur main job is to \u0026ldquo;stream\u0026rdquo; our desktop to the Chromecast device. For this purpose, the Styled Media Receiver supports three streaming protocols:\nDynamic Adaptive Streaming over HTTP (DASH) Apple\u0026rsquo;s HTTP Live Streaming (HLS) Microsoft\u0026rsquo;s Smooth streaming We drop considerations for the Smooth Streaming protocol here because of the lack of feature differences compared to the other widely supported protocols, except that HLS and Smooth Streaming support pre-loading by default.\nSo we end up here with two choices: DASH and HLS. Now, HLS is widely supported; on the other hand, DASH is codec agnostic for both video and audio. In terms of latency, both are said to have similar latencies that depend on the segment duration we decide upon.\nAs per the HLS\u0026rsquo;s RFC (linked below), the EXT-X-TARGETDURATION tag in the playlist file (or manifest file) accepts a decimal integer value. It dictates how much the maximum duration of each segment can be (rounded off to the nearest integer). It is suspected to be similar to DASH, although its RFC does not clearly mention so. We better find out by actually experimenting and streaming.\nReducing the segment size too much can cause the bitrate to bump up and the stream quality to degrade thanks to all the added keyframes for each segment, so we need to test what suits this live stream the best.\nNext up, we take the discussion to the Custom Web Receiver and the conclusions from some of our tests with the Chromecast streamings using the Command and Control (CaC) Tool, which is a sender app provided by Google for testing and debugging Web Receiver apps.\nWe want to test out and know more about other protocols not supported out of the box in Chromecast but can work fine with a Custom Web Receiver: SRT, RTSP and WebRTC.\nThanks to Benjamin and Claudio for all the help!\nRelevant Links:\nChromecast Docs Styled Media Receiver Streaming Protocols Supported by Web Receiver DASH vs HLS by Toolbox Common Video Streaming Protocols Blog on Segment Length in DASH and HLS Blog on Segment Duration in DASH and HLS HLS RFC: EXT-X-TARGETDURATION tag DASH RFC CaC Tool ","date":"2022-06-12T00:00:00Z","image":"https://kyteinsky.github.io/p/gnome-introductory-post/GNOME-logo-500x316_huc3a6bb4b474f9f0abf2bbc70e8fa6968_11449_120x120_fill_box_smart1_3.png","permalink":"https://kyteinsky.github.io/p/gnome-introductory-post/","title":"GNOME Introductory Post"},{"content":" The Minikube Cluster It is a local playground to learn or test your code as it would run on a full-fledged Kubernetes Cluster. It creates a small cluster consisting of only one node.\nThe command minikube start launches the cluster with options for bare-metal, ssh, docker among others. The cluster can be managed with CLI but it also offers a GUI in the web browser, can be launched with minikube dashboard command.\nThe task of minikube is over here. Now we head on to using the kubectl command to manage the cluster.\nManage the Cluster Information gathering can be done easily using the command kubectl get followed by pods, services, deployments, replicaset, etc. A deployment can be easily created (using docker here) by running\n$ kubectl create deployment \u0026lt;name\u0026gt; --image=\u0026lt;docker-image-name\u0026gt; deployment.apps/\u0026lt;name\u0026gt; created Now we can view the pods created using command:\n$ kubectl get pods NAME READY STATUS RESTARTS AGE \u0026lt;name\u0026gt;-\u0026lt;random-string\u0026gt; 1/1 Running 0 5s There is only one pod and only one replicaset (kubectl get replicasets), because that is the default value, can be changed with --replicas flag, just like\n$ kubectl create deployment \u0026lt;name\u0026gt; --image=\u0026lt;docker-image-name\u0026gt; --replicas=3 Doing things this way would be slightly cumbersome when there were many different pods with different configurations, moreover they are hard to track, hence I will be using an easier way to deploy the cluster - using YAML configuration files.\nThe following config from this YouTube video creates a nginx cluster with 3 replicas and exposes the port 8080\napiVersion: apps/v1 kind: Deployment metadata: name: nginx-depl labels: app: nginx spec: replicas: 3 selector: matchLabels: app: nginx template: metadata: labels: app: nginx spec: containers: - name: nginx image: nginx:1.16 ports: - containerPort: 8080 And it can be deployed using kubectl apply -f filename.yml\nAbove was an example where three replicas were created with one pod each with one container each, we can also create one pod with two containers which have totally different docker images. This YAML configuration from this helpful website below does exactly that.\napiVersion: v1 kind: Pod metadata: name: nginx-pod spec: volumes: - name: html emptyDir: {} containers: - name: first image: nginx volumeMounts: - name: html mountPath: /usr/share/nginx/html - name: second image: debian volumeMounts: - name: html mountPath: /html command: [\u0026#34;/bin/sh\u0026#34;, \u0026#34;-c\u0026#34;] args: - while true; do date \u0026gt;\u0026gt; /html/index.html; sleep 1; done It is a pod configuration that attaches a common volume to both the containers named html, which is an empty directory. Then it defines the configuration for the two containers named first and second with docker images nginx and docker respectively. In the first container, the html volume is mounted at /usr/share/nginx/html so that nginx would serve content from there, and the second container is just a linux destribution that mounts the html volume at location /html in its file structure and executes the command /bin/sh -c with these arguments\nwhile true; do date \u0026gt;\u0026gt; /html/index.html; sleep 1; done This piece of code just appends the /html/index.html file and sets it content to be the present datetime.\nLong story short debian writes data to the index.html file which is inside the html volume, every second, and nginx reads from the same volume\nOne can create the pod using the YAML file with the following command:\n$ kubectl create -f nginx-pod.yml pod/nginx-pod created The pod can be viewed using\n$ kubectl get pods NAME READY STATUS RESTARTS AGE nginx-pod 2/2 Running 0 6s Now the index.html file can be viewed by running cat command inside the container\n$ kubectl exec nginx-pod -c first -- /bin/cat /usr/share/nginx/html/index.html # for the first container Thu Jul 7 10:41:36 UTC 2021 Thu Jul 7 10:41:37 UTC 2021 Thu Jul 7 10:41:38 UTC 2021 Thu Jul 7 10:41:39 UTC 2021 $ kubectl exec nginx-pod -c second -- /bin/cat /html/index.html # for the second container Thu Jul 7 10:41:36 UTC 2021 Thu Jul 7 10:41:37 UTC 2021 Thu Jul 7 10:41:38 UTC 2021 Thu Jul 7 10:41:39 UTC 2021 Thu Jul 7 10:41:40 UTC 2021 Thu Jul 7 10:41:41 UTC 2021 Thu Jul 7 10:41:42 UTC 2021 Thu Jul 7 10:41:43 UTC 2021 Thu Jul 7 10:41:44 UTC 2021 Thu Jul 7 10:41:45 UTC 2021 Thu Jul 7 10:41:46 UTC 2021 Thu Jul 7 10:41:47 UTC 2021 Thu Jul 7 10:41:48 UTC 2021 kubectl describe po command can be used to get detailed information about the pods running in the cluster.\n","date":"2021-07-06T00:00:00Z","image":"https://kyteinsky.github.io/p/playing-around-with-kubernetes-in-ec2/kubernetes-logo_hu2ea33729aed5bb392e760ba17b57be76_83730_120x120_fill_box_smart1_3.png","permalink":"https://kyteinsky.github.io/p/playing-around-with-kubernetes-in-ec2/","title":"Playing Around with Kubernetes in EC2"},{"content":" Inside the AWS Console: Explored compute machine options\nEC2 is the easiest of all, provides vanilla virtual machine experience for fully self-managing the infrastructure Lambda is for small fuctions or API calls App Runner provides a full-managed infrastructure to run our app handling all the scaling, load balancing, installation of software and deployment. Elastic Beanstalk is a similar service to App Runner, but there is a slight difference, Elastic Beanstalk provides more control over infrastructure after deployment, whereas App Runner manages it fully even after deployment. (source) Explored storage options\nS3, Simple Storage Service, used for every purpose like storing files and also hosting static websites EFS, Elastic File System, used to store files that can be attached to multiple EC2 instances, are fully-managed and scale automatically FSx is used for Windows Servers and playing nice with its ecosystem VPC\nUsed to create a private space in cloud for related, non-public services to live in One or more services can be exposed to the internet and other VPCs or AWS services, while secure services like databases can be secured and only accessed by some hidden service inside the VPC making it more secure Creating two EC2 instances inside a VPC and one S3 bucket using AWS CLI and then clearing off all the resources (VPC deleted through Console because of security group being of type \u0026lsquo;default\u0026rsquo; was not being deleted through CLI for some convoluted reason ","date":"2021-06-29T00:00:00Z","image":"https://kyteinsky.github.io/p/aws-console-and-cli-exploration/aws-logo-full_hu521aa76c031b70f3e5f473d7c126ac09_325263_120x120_fill_box_smart1_3.png","permalink":"https://kyteinsky.github.io/p/aws-console-and-cli-exploration/","title":"AWS Console and CLI Exploration"},{"content":" Ensure the prerequisites An AWS Account AWS cli installed, instructions for the same can be found here. Have generated credentials (access key and secret), can be created from here. Setting up AWS CLI Type aws configure on the terminal and enter the Access Key ID and Secret Access Key, other fields can be blank.\nCreating a config file for terraform to understand Create a directory and switch to it Create a file named main.tf and populate it with the following sample configuration, where app_server is the name of the instance us-west-2 is the region where the instance will be deployed ami-830c94e3 is the unique identifier for the instance t2.micro is the instance type ExampleAppServerInstance is the tag name for grouping of instances terraform { required_providers { aws = { source = \u0026#34;hashicorp/aws\u0026#34; version = \u0026#34;~\u0026gt; 3.27\u0026#34; } } required_version = \u0026#34;\u0026gt;= 0.14.9\u0026#34; } provider \u0026#34;aws\u0026#34; { profile = \u0026#34;default\u0026#34; region = \u0026#34;us-west-2\u0026#34; } resource \u0026#34;aws_instance\u0026#34; \u0026#34;app_server\u0026#34; { ami = \u0026#34;ami-830c94e3\u0026#34; instance_type = \u0026#34;t2.micro\u0026#34; tags = { Name = \u0026#34;ExampleAppServerInstance\u0026#34; } } Installation of and Working with Terraform CLI: Terraform can be installed following this guide Configuration of terraform CLI can be done using command terraform init The configuration file can be formatted using terraform fmt command And the file can be validated using terraform validate command Finally all the changes can be viewed using terraform plan command and perfomed using terraform apply command Here is a terminal cast performing the above actions ","date":"2021-06-27T00:00:00Z","image":"https://kyteinsky.github.io/p/installing-terraform-and-creating-an-ec2-instance/terraform-logo-extended_hu9aa061a1aaf8d97b03487600ef22b7fc_104790_120x120_fill_q75_box_smart1.jpg","permalink":"https://kyteinsky.github.io/p/installing-terraform-and-creating-an-ec2-instance/","title":"Installing Terraform and Creating an EC2 Instance"},{"content":" Azure part of story First create one Azure account, I am using a student account Create a basic instance (Ubuntu image works for most cases) with 1 vCPU and 1 GiB RAM, or according to your needs Download the private key and SSH into the instance Update the packages Install docker (following this guide) Let\u0026rsquo;s move on to the local machine setup\nLocal machine setup SSH Keys Setup We need to install docker here as well Add ssh key (downloaded from Azure portal) to OpenSSH Auth agent eval \u0026#39;ssh-agent\u0026#39; ssh-add \u0026lt;path-to-pem-file\u0026gt;/\u0026lt;file-name\u0026gt;.pem (or) Add AddKeysToAgent yes to ~/.ssh/config file to automatically do that for you echo \u0026#34;AddKeysToAgent yes\u0026#34; \u0026gt;\u0026gt; ~/.ssh/config Docker Context Setup Create a new docker context to talk to the docker in Azure instance with command docker context create azure-box --docker \u0026#34;host=ssh://azureuser@\u0026lt;public-ip-of-instance\u0026gt;\u0026#34; See all available contexts using docker context ls Switching to Azure docker is done using command docker context use azure-box and back to the local docker using docker context use default Now when we issue commands to docker as usual docker ps, it is directly communicating to the docker running in the Azure instance Note: \u0026lsquo;azure-box\u0026rsquo; is just a name, can be replaced with anything of your choice\n🎉 Now you have docker running in the cloud, accessible from the terminal Finally just for testing, we can spin up a Ubuntu container and bash into it: ","date":"2021-06-15T00:00:00Z","image":"https://kyteinsky.github.io/p/hosting-docker-in-cloud-azure/rafael-garcin-sqZ4GeyYGx8-unsplash_hu124ff0668c422682b8055a7bbd405272_397209_120x120_fill_q75_box_smart1.jpg","permalink":"https://kyteinsky.github.io/p/hosting-docker-in-cloud-azure/","title":"Hosting Docker in Cloud (Azure)"},{"content":"How to add and commit changes in the and then push the changes to a remote repository (here GitHub) Outline of steps to be performed: Change some files or create some Issuegit add \u0026lt;name of files\u0026gt;command to add files to be committed Then commit them using git commit -am \u0026lt;commit message\u0026gt;, here a is for all files, m is for message, and then you place your message for the changes (optional) Finally, push the changes to a remote repository Let\u0026rsquo;s see this in action ","date":"2021-06-11T00:00:00Z","image":"https://kyteinsky.github.io/p/git-add-git-commit-and-git-push/roman-synkevych-UT8LMo-wlyk-unsplash_hue2e581fbbca1ab8a23c99d56e2dd85e8_1034377_120x120_fill_q75_box_smart1.jpg","permalink":"https://kyteinsky.github.io/p/git-add-git-commit-and-git-push/","title":"Git Add, Git Commit and Git Push"},{"content":" Following a general approach for any theme, steps to be performed (following this article): Specific for the theme Stack: Click Here\nGet code for asciinema player wget https://github.com/asciinema/asciinema-player/releases/download/v2.6.1/asciinema-player.css wget https://github.com/asciinema/asciinema-player/releases/download/v2.6.1/asciinema-player.js Place them in static/css and static/js, where static is folder in the root dir of the website Copy the layouts/partials/_shared/head.html or layouts/partials/head/head.html from themes/\u0026lt;theme-name\u0026gt; directory to your website\u0026rsquo;s root directory with the same folder structure Do the same with layouts/_default/baseof.html Append this code block for css in layouts/partials/{head or _shared}/head.html {{ if .Params.asciinema }} \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; type=\u0026#34;text/css\u0026#34; href=\u0026#34;{{ .Site.BaseURL }}css/asciinema-player.css\u0026#34; /\u0026gt; {{ end }} And this for js in layouts/_default/baseof.html {{ if .Params.asciinema }} \u0026lt;script defer src=\u0026#34;{{ .Site.BaseURL }}js/asciinema-player.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; {{ end }} Now let\u0026rsquo;s make a shortcode for asciinema here: layouts/shortcodes/asciinema.html One can change the default rows and columns attributes inside \u0026lt;asciinema-player\u0026gt; tag\n\u0026lt;p\u0026gt; \u0026lt;asciinema-player src=\u0026#34;/casts/{{ with .Get \u0026#34;key\u0026#34; }}{{ . }}{{ end }}\u0026#34; cols=\u0026#34;{{ if .Get \u0026#34;cols\u0026#34; }}{{ .Get \u0026#34;cols\u0026#34; }}{{ else }}640{{ end }}\u0026#34; rows=\u0026#34;{{ if .Get \u0026#34;rows\u0026#34; }}{{ .Get \u0026#34;rows\u0026#34; }}{{ else }}10{{ end }}\u0026#34; {{ if .Get \u0026#34;autoplay\u0026#34; }}autoplay=\u0026#34;{{ .Get \u0026#34;autoplay\u0026#34; }}\u0026#34;{{ end }} {{ if .Get \u0026#34;preload\u0026#34; }}preload=\u0026#34;{{ .Get \u0026#34;preload\u0026#34; }}\u0026#34;{{ end }} {{ if .Get \u0026#34;loop\u0026#34; }}loop=\u0026#34;{{ .Get \u0026#34;loop\u0026#34; }}\u0026#34;{{ end }} start-at=\u0026#34;{{ if .Get \u0026#34;start-at\u0026#34; }}{{ .Get \u0026#34;start-at\u0026#34; }}{{ else }}0{{ end }}\u0026#34; speed=\u0026#34;{{ if .Get \u0026#34;speed\u0026#34; }}{{ .Get \u0026#34;speed\u0026#34; }}{{ else }}1{{ end }}\u0026#34; {{ if .Get \u0026#34;idle-time-limit\u0026#34; }}idle-time-limit=\u0026#34;{{ .Get \u0026#34;idle-time-limit\u0026#34; }}\u0026#34;{{ end }} {{ if .Get \u0026#34;poster\u0026#34; }}poster=\u0026#34;{{ .Get \u0026#34;poster\u0026#34; }}\u0026#34;{{ end }} {{ if .Get \u0026#34;font-size\u0026#34; }}font-size=\u0026#34;{{ .Get \u0026#34;font-size\u0026#34; }}\u0026#34;{{ end }} {{ if .Get \u0026#34;theme\u0026#34; }}theme=\u0026#34;{{ .Get \u0026#34;theme\u0026#34; }}\u0026#34;{{ end }} {{ if .Get \u0026#34;title\u0026#34; }}title=\u0026#34;{{ .Get \u0026#34;title\u0026#34; }}\u0026#34;{{ end }} {{ if .Get \u0026#34;author\u0026#34; }}author=\u0026#34;{{ .Get \u0026#34;author\u0026#34; }}\u0026#34;{{ end }} {{ if .Get \u0026#34;author-url\u0026#34; }}author-url=\u0026#34;{{ .Get \u0026#34;author-url\u0026#34; }}\u0026#34;{{ end }} {{ if .Get \u0026#34;author-img-url\u0026#34; }}author-img-url=\u0026#34;{{ .Get \u0026#34;author-img-url\u0026#34; }}\u0026#34;{{ end }} \u0026gt;\u0026lt;/asciinema-player\u0026gt; \u0026lt;/p\u0026gt; Finally create a new post and set asciinema = true in the metadata (for toml) And embed the asciinema cast as follows in the body part {{\u0026lt; asciinema key=\u0026#34;demo-folder/demo-cast.cast\u0026#34; rows=\u0026#34;35\u0026#34; preload=\u0026#34;1\u0026#34; \u0026gt;}} And don\u0026rsquo;t forget to put your .cast file in static/casts/demo-folder/democast.cast First attempt at the task Correcting the mistakes done above For the Stack theme, the kind developer of the theme @zhixuan666 mentioned a more efficient way to do it. Here is his reply to the GitHub issue: link\n","date":"2021-06-10T00:00:00Z","permalink":"https://kyteinsky.github.io/p/embedding-asciinema-in-hugo-websites/","title":"Embedding Asciinema in Hugo Websites"},{"content":"We create a new Hugo website in terminal and install a custom theme named Stack and create a sample page Outline of steps to be performed: Create an empty hugo site with boilerplate code Initialize the site as a git repository Add the theme as a submodule to receive updates automatically, can be just cloned in place or downloaded and extracted at the right place manually Copy some example site\u0026rsquo;s posts and config file to the root folder of the website to edit them without disturbing the original theme files (these files override the respective default ones) Edit the config.yaml file as per requirements, and delete the config.toml file that was placed by hugo Create a new post with sone markdown text host the site locally This might be the right moment to commit the changes as starting point of the repository. Here is the asciinema terminal cast: ","date":"2021-06-01T00:00:00Z","image":"https://kyteinsky.github.io/p/new-hugo-website/hugo-logo-wide.svg","permalink":"https://kyteinsky.github.io/p/new-hugo-website/","title":"New Hugo Website"},{"content":"正文测试 而这些并不是完全重要，更加重要的问题是， 带着这些问题，我们来审视一下学生会退会。 既然如何， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 我们不得不面对一个非常尴尬的事实，那就是， 可是，即使是这样，学生会退会的出现仍然代表了一定的意义。 学生会退会，发生了会如何，不发生又会如何。 经过上述讨论， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 学生会退会，到底应该如何实现。 这样看来， 在这种困难的抉择下，本人思来想去，寝食难安。 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 就我个人来说，学生会退会对我的意义，不能不说非常重大。 莎士比亚曾经提到过，人的一生是短的，但如果卑劣地过这一生，就太长了。这似乎解答了我的疑惑。 莫扎特说过一句富有哲理的话，谁和我一样用功，谁就会和我一样成功。这启发了我， 对我个人而言，学生会退会不仅仅是一个重大的事件，还可能会改变我的人生。 学生会退会，到底应该如何实现。 一般来说， 从这个角度来看， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 在这种困难的抉择下，本人思来想去，寝食难安。 了解清楚学生会退会到底是一种怎么样的存在，是解决一切问题的关键。 一般来说， 生活中，若学生会退会出现了，我们就不得不考虑它出现了的事实。 问题的关键究竟为何？ 而这些并不是完全重要，更加重要的问题是。\n奥斯特洛夫斯基曾经说过，共同的事业，共同的斗争，可以使人们产生忍受一切的力量。　带着这句话，我们还要更加慎重的审视这个问题： 一般来讲，我们都必须务必慎重的考虑考虑。 既然如此， 这种事实对本人来说意义重大，相信对这个世界也是有一定意义的。 带着这些问题，我们来审视一下学生会退会。 我认为， 我认为， 在这种困难的抉择下，本人思来想去，寝食难安。 问题的关键究竟为何？ 每个人都不得不面对这些问题。 在面对这种问题时， 要想清楚，学生会退会，到底是一种怎么样的存在。 我认为， 既然如此， 每个人都不得不面对这些问题。 在面对这种问题时， 那么， 我认为， 学生会退会因何而发生。\n引用 思念是最暖的忧伤像一双翅膀\n让我停不了飞不远在过往游荡\n不告而别的你 就算为了我着想\n这么沉痛的呵护 我怎么能翱翔\n最暖的憂傷 - 田馥甄\n图片 Photo by Florian Klauer on Unsplash Photo by Luca Bravo on Unsplash Photo by Helena Hertz on Unsplash Photo by Hudai Gayiran on Unsplash ![Photo by Florian Klauer on Unsplash](florian-klauer-nptLmg6jqDo-unsplash.jpg) ![Photo by Luca Bravo on Unsplash](luca-bravo-alS7ewQ41M8-unsplash.jpg) ![Photo by Helena Hertz on Unsplash](helena-hertz-wWZzXlDpMog-unsplash.jpg) ![Photo by Hudai Gayiran on Unsplash](hudai-gayiran-3Od_VKcDEAA-unsplash.jpg) 相册语法来自 Typlog\n","date":"2020-09-09T00:00:00Z","image":"https://kyteinsky.github.io/p/test-chinese/helena-hertz-wWZzXlDpMog-unsplash_hu45a5e3ad5e058da6a00650ed8fd40bea_15530_120x120_fill_q75_box_smart1.jpg","permalink":"https://kyteinsky.github.io/p/test-chinese/","title":"Chinese Test"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating. — Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Code block with backticks \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://kyteinsky.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hud7e36f7e20e71be184458283bdae4646_55974_120x120_fill_q75_box_smart1.jpg","permalink":"https://kyteinsky.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Hugo ships with several Built-in Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nYouTube Privacy Enhanced Shortcode Twitter Simple Shortcode “In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”\n— Jan Tschichold pic.twitter.com/gcv7SrhvJb\n\u0026mdash; Graphic Design History (@DesignReviewed) January 17, 2019 Vimeo Simple Shortcode ","date":"2019-03-10T00:00:00Z","permalink":"https://kyteinsky.github.io/p/rich-content/","title":"Rich Content"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://kyteinsky.github.io/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu958d513eeefe5556a31d065479ecc5ac_14205_120x120_fill_q75_box_smart1.jpg","permalink":"https://kyteinsky.github.io/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTex globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTex on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","date":"2019-03-08T00:00:00Z","permalink":"https://kyteinsky.github.io/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n.emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; }","date":"2019-03-05T00:00:00Z","image":"https://kyteinsky.github.io/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_huf941de4769045cdfa8c9ee7036519a2a_35369_120x120_fill_q75_box_smart1.jpg","permalink":"https://kyteinsky.github.io/p/emoji-support/","title":"Emoji Support"}]