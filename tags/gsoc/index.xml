<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>gsoc on kyte codes</title><link>https://kyteinsky.github.io/tags/gsoc/</link><description>Recent content in gsoc on kyte codes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 05 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kyteinsky.github.io/tags/gsoc/index.xml" rel="self" type="application/rss+xml"/><item><title>Chromecast Connect</title><link>https://kyteinsky.github.io/p/chromecast-connect/</link><pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate><guid>https://kyteinsky.github.io/p/chromecast-connect/</guid><description>&lt;p>It has been a while studying and working with the Chromecast Protocol. This protocol is proprietary, and officially only the Chrome browser, Android, and iOS platforms support casting to a Chromecast-enabled device.&lt;br>
Now, Chromium is open source, and so is Android, but we would not want anything to do with Android for obvious reasons, not to mention this feature may be tucked away in Google Play Services.&lt;br>
So we settle with Chromium which is written in C++. Thankfully almost all of the hard work was done by many other open source projects, notably Node CastV2. Not only this project provides a simple implementation for the Chromecast protocol but also a written explanation of the underlying stuff and how things actually work.&lt;br>
All I need to figure out is how to implement that is C.&lt;/p>
&lt;p>A brief overview of the connection and communication is as follows:&lt;/p>
&lt;ul>
&lt;li>We start by discovering the Chromecast devices using mDNS (Avahi) for devices named &amp;ldquo;googlecast&amp;rdquo;&lt;/li>
&lt;li>Next up we open a socket connection to the selected device on port 8009&lt;/li>
&lt;li>We then negotiate a TLS connection on the same socket connection&lt;/li>
&lt;li>Now comes the part where we open a &amp;ldquo;virtual connection&amp;rdquo; with the device&lt;/li>
&lt;li>With that done, the Chromecast device expects a &amp;ldquo;PING&amp;rdquo; message every 5 seconds to keep the virtual connection alive&lt;/li>
&lt;li>We are in the position to send and receive messages now&lt;/li>
&lt;/ul>
&lt;p>The messages are JSON encoded and serialized in protobuf according to the proto file conveniently found in the Chromium source code. Before sending the binary over, we prefix it with 4 bytes of packet length in Big Endian order. JSON is universal, good and easy to understand mostly because it is text, but what about protobuf? It is binary. Handy-dandy library protobuf-c save the day.&lt;/p>
&lt;p>Here is what the proto file looks like:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-proto" data-lang="proto">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Copyright 2013 The Chromium Authors. All rights reserved.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Use of this source code is governed by a BSD-style license that can be
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// found in the LICENSE file.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="n">syntax&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;proto2&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="k">option&lt;/span> &lt;span class="n">optimize_for&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LITE_RUNTIME&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nn">castchannel&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">CastMessage&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">ProtocolVersion&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">CASTV2_1_0&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">required&lt;/span> &lt;span class="n">ProtocolVersion&lt;/span> &lt;span class="n">protocol_version&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">required&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">source_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">required&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">destination_id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">required&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">namespace&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">PayloadType&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">STRING&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">BINARY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">required&lt;/span> &lt;span class="n">PayloadType&lt;/span> &lt;span class="n">payload_type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">optional&lt;/span> &lt;span class="kt">string&lt;/span> &lt;span class="n">payload_utf8&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">6&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">optional&lt;/span> &lt;span class="kt">bytes&lt;/span> &lt;span class="n">payload_binary&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">7&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">AuthChallenge&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">AuthResponse&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">required&lt;/span> &lt;span class="kt">bytes&lt;/span> &lt;span class="n">signature&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">required&lt;/span> &lt;span class="kt">bytes&lt;/span> &lt;span class="n">client_auth_certificate&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">AuthError&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">ErrorType&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">INTERNAL_ERROR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="n">NO_TLS&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">required&lt;/span> &lt;span class="n">ErrorType&lt;/span> &lt;span class="n">error_type&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="kd">message&lt;/span> &lt;span class="nc">DeviceAuthMessage&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">optional&lt;/span> &lt;span class="n">AuthChallenge&lt;/span> &lt;span class="n">challenge&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">optional&lt;/span> &lt;span class="n">AuthResponse&lt;/span> &lt;span class="n">response&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span> &lt;span class="k">optional&lt;/span> &lt;span class="n">AuthError&lt;/span> &lt;span class="n">error&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">&lt;/span>&lt;span class="p">}&lt;/span>&lt;span class="err">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We can send many types of messages like &lt;code>CONNECT&lt;/code>, &lt;code>PING&lt;/code>, &lt;code>GET_STATUS&lt;/code>, &lt;code>GET_APP_AVAILIBILITY&lt;/code>, &lt;code>STOP&lt;/code>, &lt;code>CLOSE&lt;/code>, etc.&lt;br>
These messages are sent in their respective namespaces (some of them are: &lt;code>urn:x-cast:com.google.cast.tp.connection&lt;/code>, &lt;code>urn:x-cast:com.google.cast.tp.heartbeat&lt;/code>, &lt;code>urn:x-cast:com.google.cast.receiver&lt;/code>) along with some other values such as &lt;code>sender_id&lt;/code>, &lt;code>destination_id&lt;/code>, &lt;code>payload_type&lt;/code>, &lt;code>payload_utf8&lt;/code>, etc.&lt;br>
Different namespaces don&amp;rsquo;t mean we create new channels for each one. They are just like the other values in the protobuf message.&lt;/p>
&lt;p>We won&amp;rsquo;t bother ourselves to verify the authenticity of the Chromecast device we are talking to. Thus all the Auth- messages shall not be entertained. We are much more interested in the &lt;code>CastMessage&lt;/code>.&lt;br>
Protobuf-c comes with a lot of helper functions, but it offers yet more. We use &lt;code>protoc&lt;/code>, &amp;ldquo;a code generator that converts Protocol Buffer .proto files to C descriptor code&amp;rdquo;.&lt;/p>
&lt;p>Having the TLS connection set up, we serialize a connect message and send it over.&lt;br>
For some odd reason when I sent &lt;code>{ &amp;quot;type&amp;quot;: &amp;quot;CONNECT&amp;quot; }&lt;/code>, it replied with &lt;code>{ &amp;quot;type&amp;quot;: &amp;quot;CLOSE&amp;quot; }&lt;/code>, replied &lt;code>{ &amp;quot;type&amp;quot;: &amp;quot;PING&amp;quot; }&lt;/code> with &lt;code>{ &amp;quot;type&amp;quot;: &amp;quot;PONG&amp;quot; }&lt;/code>, and &lt;code>{ &amp;quot;type&amp;quot;: &amp;quot;GET_STATUS&amp;quot; }&lt;/code> with &lt;code>{ &amp;quot;type&amp;quot;: &amp;quot;CLOSE&amp;quot; }&lt;/code>.&lt;br>
When I insisted on connection multiple times, it got mad and stopped replying to my messages :/&lt;br>
It still played ping pong though (replied to all the ping messages with pong).&lt;/p>
&lt;p>We haven&amp;rsquo;t come to terms since then. Was it because I left it hanging, and I have a feeling it must have waited for my messages all night?&lt;br>
I tried to sever all ties and make them all over again, shut it down and revived it, changed my address (local IP), and changed my name (sender_id), but who knows what is going inside that little mind of it.&lt;/p>
&lt;p>Fear not our next mission involves peering into that mind and getting to the root cause of this confusion (Custom Web Receiver).&lt;/p>
&lt;hr>
&lt;p>We didn&amp;rsquo;t talk about the Custom Web Receiver this time and the protocols that would be implemented. Hang tight because that is what we are going to do in the coming days.&lt;/p>
&lt;p>Many thanks to Benjamin and Claudio! I couldn&amp;rsquo;t have made it without their help and advice.&lt;/p>
&lt;hr>
&lt;p>Relevant Links:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://gitlab.gnome.org/GNOME/gnome-network-displays/-/merge_requests/171" target="_blank" rel="noopener"
>Merge Request&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developers.google.com/cast/docs/" target="_blank" rel="noopener"
>Chromecast Docs&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/thibauts/node-castv2" target="_blank" rel="noopener"
>Node CastV2&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://chromium.googlesource.com/chromium/src.git" target="_blank" rel="noopener"
>Chromium Source Code&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://github.com/protobuf-c/protobuf-c" target="_blank" rel="noopener"
>Protobuf-c&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developers.google.com/cast/docs/reference/web_receiver/cast.framework.messages" target="_blank" rel="noopener"
>Cast Framework Messages&lt;/a>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p></description></item><item><title>GNOME Introductory Post</title><link>https://kyteinsky.github.io/p/gnome-introductory-post/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>https://kyteinsky.github.io/p/gnome-introductory-post/</guid><description>&lt;p>I will be working as a Google Summer of Code Intern at GNOME Foundation, and my project will be to add Chromecast support to the already very cool &lt;a class="link" href="https://gitlab.gnome.org/GNOME/gnome-network-displays" target="_blank" rel="noopener"
>GNOME Network Displays app&lt;/a> that has Miracast support as of now. It can be installed through &lt;a class="link" href="https://flathub.org/apps/details/org.gnome.NetworkDisplays" target="_blank" rel="noopener"
>flatpak&lt;/a> as well.&lt;/p>
&lt;h3 id="details">Details&lt;/h3>
&lt;p>Linux desktop users will be able to cast their screens to Miracast and Chromecast devices. For the Android TVs that feature both of them, it would be wise to opt for the Chromecast path when both the devices share the same router (i.e. are on the same network) since Miracast would require setting up a WiFi-Direct connection to function (may be faster with less latency, may not be worth the trouble).&lt;/p>
&lt;p>I believe this will see the light of day with very helpful and experienced mentors, &lt;strong>Claudio Wunder&lt;/strong> and &lt;strong>Benjamin Berg&lt;/strong>.&lt;/p>
&lt;h3 id="progress">Progress&lt;/h3>
&lt;p>We started by looking into the Chromecast documentation (an adventure in itself). So there are two ends to deal with - the sender one and the receiver one.&lt;/p>
&lt;h4 id="the-receiver-end">The receiver end&lt;/h4>
&lt;p>There are two options here: &lt;strong>Styled Media Receiver&lt;/strong> and &lt;strong>Custom Web Receiver&lt;/strong>.&lt;/p>
&lt;p>The &lt;strong>Styled Media Receiver&lt;/strong> does everything for us. It hosts the receiver application (an HTML5 app) and provides all the default styles and functionality. If we want to change the styles and/or the logo, we are free to host them on an HTTPS server, and we&amp;rsquo;ll be done.&lt;/p>
&lt;p>With everything it offers, it has limited still quite adequate media support, including playing video files, audio files, streaming video, and audio, displaying images and opening specific apps on the TV (like YouTube).&lt;/p>
&lt;p>Our main job is to &amp;ldquo;stream&amp;rdquo; our desktop to the Chromecast device. For this purpose, the &lt;strong>Styled Media Receiver&lt;/strong> supports three streaming protocols:&lt;/p>
&lt;ul>
&lt;li>Dynamic Adaptive Streaming over HTTP (DASH)&lt;/li>
&lt;li>Apple&amp;rsquo;s HTTP Live Streaming (HLS)&lt;/li>
&lt;li>Microsoft&amp;rsquo;s Smooth streaming&lt;/li>
&lt;/ul>
&lt;p>We drop considerations for the Smooth Streaming protocol here because of the lack of feature differences compared to the other widely supported protocols, except that HLS and Smooth Streaming support pre-loading by default.&lt;/p>
&lt;p>So we end up here with two choices: DASH and HLS. Now, HLS is widely supported; on the other hand, DASH is codec agnostic for both video and audio. In terms of latency, both are said to have similar latencies that depend on the segment duration we decide upon.&lt;/p>
&lt;p>As per the HLS&amp;rsquo;s RFC (linked below), the &lt;code>EXT-X-TARGETDURATION&lt;/code> tag in the playlist file (or manifest file) accepts a decimal integer value. It dictates how much the maximum duration of each segment can be (rounded off to the nearest integer). It is suspected to be similar to DASH, although its RFC does not clearly mention so. We better find out by actually experimenting and streaming.&lt;/p>
&lt;p>Reducing the segment size too much can cause the bitrate to bump up and the stream quality to degrade thanks to all the added keyframes for each segment, so we need to test what suits this live stream the best.&lt;/p>
&lt;hr>
&lt;p>Next up, we take the discussion to the &lt;strong>Custom Web Receiver&lt;/strong> and the conclusions from some of our tests with the Chromecast streamings using the Command and Control (CaC) Tool, which is a sender app provided by Google for testing and debugging Web Receiver apps.&lt;/p>
&lt;p>We want to test out and know more about other protocols not supported out of the box in Chromecast but can work fine with a Custom Web Receiver: SRT, RTSP and WebRTC.&lt;/p>
&lt;p>Thanks to Benjamin and Claudio for all the help!&lt;/p>
&lt;hr>
&lt;p>Relevant Links:&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://developers.google.com/cast/docs/" target="_blank" rel="noopener"
>Chromecast Docs&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developers.google.com/cast/docs/styled_receiver" target="_blank" rel="noopener"
>Styled Media Receiver&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developers.google.com/cast/docs/web_receiver/streaming_protocols" target="_blank" rel="noopener"
>Streaming Protocols Supported by Web Receiver&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.toolbox.com/tech/programming/guest-article/mpeg-dash-vs-hls-which-one-should-you-use/" target="_blank" rel="noopener"
>DASH vs HLS by Toolbox&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://www.dacast.com/blog/video-streaming-protocol/" target="_blank" rel="noopener"
>Common Video Streaming Protocols&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://bitmovin.com/mpeg-dash-hls-segment-length/" target="_blank" rel="noopener"
>Blog on Segment Length in DASH and HLS&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://streaminglearningcenter.com/learning/choosing-the-optimal-segment-duration.html" target="_blank" rel="noopener"
>Blog on Segment Duration in DASH and HLS&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc8216#section-4.3.3.1" target="_blank" rel="noopener"
>HLS RFC: EXT-X-TARGETDURATION tag&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://datatracker.ietf.org/doc/html/rfc7933" target="_blank" rel="noopener"
>DASH RFC&lt;/a>&lt;/li>
&lt;li>&lt;a class="link" href="https://developers.google.com/cast/docs/debugging/cac_tool" target="_blank" rel="noopener"
>CaC Tool&lt;/a>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p></description></item></channel></rss>